rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ----------------------
    // Helper functions
    // ----------------------
    function isAuthenticated() {
      return request.auth != null;
    }
    function isAdmin() {
      return request.auth != null &&
             (request.auth.token.admin == true ||
              request.auth.token.role == 'admin' ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    // ----------------------
    // Users (public profile)
    // ----------------------
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    // ----------------------
    // Friend requests (pending)
    // ----------------------
    match /friend_requests/{requestId} {
      allow read, write: if isAuthenticated();
    }
    // ----------------------
    // Friendships (accepted)
    // ----------------------
    match /friendships/{friendshipId} {
      allow read, write: if isAuthenticated();
    }
    // ----------------------
    // Scores (individual quiz attempts)
    // ----------------------
    match /scores/{docId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Only Cloud Functions may update
    }
    // ----------------------
    // Test Attempts
    // ----------------------
    match /test_attempts/{attemptId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Only Cloud Functions
    }
    // ----------------------
    // User Ranks - FIXED: Allow users to update their own ranks
    // ----------------------
    match /user_ranks/{userId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && userId == request.auth.uid;
      allow delete: if false; // Cloud Functions only
    }
    // ----------------------
    // Group Leaderboards - FIXED: Allow users to update their own entries
    // ----------------------
    match /group_leaderboards/{leaderboardId} {
      allow read: if isAuthenticated();
      allow write: if false; // Cloud Functions only for leaderboard metadata
      
      match /members/{userId} {
        allow read: if isAuthenticated();
        allow create, update: if isAuthenticated() && userId == request.auth.uid;
        allow delete: if false; // Cloud Functions only
      }
    }
    // ----------------------
    // Flat Groups
    // ----------------------
    match /groups/{groupId} {
      allow read: if isAuthenticated();
      // Users can create groups only for themselves as owner
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      // Update/Delete: only group owner or admin
      allow update, delete: if isAdmin() ||
        (isAuthenticated() && resource.data.ownerId == request.auth.uid);
      // Self-removal from memberIds
      allow update: if isAuthenticated() && (request.auth.uid in resource.data.memberIds);
    }
    // ----------------------
    // Administrative Collections
    // ----------------------
    match /schools/{schoolId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    match /unions/{unionId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    match /upazilas/{upazilaId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    match /districts/{districtId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    match /divisions/{divisionId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}